<h1>Productos en Tiempo Real</h1>

<form id="productForm">
    <div>
        <label for="title">Título:</label>
        <input type="text" id="title" required>
    </div>
    <div>
        <label for="description">Descripción:</label>
        <textarea id="description" required></textarea>
    </div>
    <div>
        <label for="price">Precio:</label>
        <input type="number" id="price" required>
    </div>
    <div>
        <label for="category">Categoría:</label>
        <input type="text" id="category" required>
    </div>
    <div>
        <label for="stock">Stock:</label>
        <input type="number" id="stock" required>
    </div>
    <button type="submit">Agregar Producto</button>
</form>

<h2>Lista de Productos</h2>
<div id="productsContainer" class="product-list">
    <!-- Los productos se cargarán dinámicamente con WebSocket -->
</div>

<!-- Modal de edición -->
<div id="editModal" class="modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.7); z-index: 1000;">
    <div class="modal-content" style="background-color: white; margin: 10% auto; padding: 20px; width: 60%; border-radius: 5px;">
        <span class="close-button" style="float: right; cursor: pointer; font-size: 24px;">&times;</span>
        <h2>Editar Producto</h2>
        <form id="editForm">
            <input type="hidden" id="editProductId">
            <div>
                <label for="editTitle">Título:</label>
                <input type="text" id="editTitle" required>
            </div>
            <div>
                <label for="editDescription">Descripción:</label>
                <textarea id="editDescription" required></textarea>
            </div>
            <div>
                <label for="editPrice">Precio:</label>
                <input type="number" id="editPrice" required>
            </div>
            <div>
                <label for="editCategory">Categoría:</label>
                <input type="text" id="editCategory" required>
            </div>
            <div>
                <label for="editStock">Stock:</label>
                <input type="number" id="editStock" required>
            </div>
            <button type="submit">Guardar Cambios</button>
        </form>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    // Conexión con Socket.io
    const socketRealTime = io();
    
    // Elementos del DOM
    const productForm = document.getElementById('productForm');
    const productsContainer = document.getElementById('productsContainer');
    
    // Solicitar productos al conectar
    socketRealTime.emit('requestProducts');
    
    // Manejar el envío del formulario
    productForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        const product = {
            title: document.getElementById('title').value,
            description: document.getElementById('description').value,
            price: parseFloat(document.getElementById('price').value),
            category: document.getElementById('category').value,
            stock: parseInt(document.getElementById('stock').value)
        };
        
        // Emitir evento para agregar producto
        socketRealTime.emit('addProduct', product);
        console.log('Producto enviado:', product);
        productForm.reset();
    });
    
    // Escuchar actualizaciones de productos
    socketRealTime.on('updateProducts', (products) => {
        console.log('Productos actualizados recibidos:', products);
        updateProductsList(products);
    });
    
    // Función para actualizar la lista de productos
    function updateProductsList(products) {
        productsContainer.innerHTML = '';
        
        if (!products || products.length === 0) {
            productsContainer.innerHTML = '<p>No hay productos disponibles</p>';
            return;
        }
        
        products.forEach(product => {
            const productId = product.id || product._id;
            const productElement = document.createElement('div');
            productElement.className = 'product-card';
            productElement.innerHTML = `
                <h3>${product.title}</h3>
                <p>${product.description}</p>
                <p>Precio: $${product.price}</p>
                <p>Categoría: ${product.category || 'N/A'}</p>
                <p>Stock: ${product.stock || 'N/A'}</p>
                <div class="product-actions">
                    <button class="edit-product" data-id="${productId}">Editar</button>
                    <button class="delete-product" data-id="${productId}">Eliminar</button>
                </div>
            `;
            productsContainer.appendChild(productElement);
            
            // Agregar evento para eliminar producto
            const deleteButton = productElement.querySelector('.delete-product');
            deleteButton.addEventListener('click', () => {
                socketRealTime.emit('deleteProduct', productId);
            });
            
            // Agregar evento para editar producto
            const editButton = productElement.querySelector('.edit-product');
            editButton.addEventListener('click', () => {
                console.log('Botón editar clickeado para producto:', product);
                openEditModal(product);
            });
        });
    }
    
    // Modal de edición
    const modal = document.getElementById('editModal');
    const closeButton = document.querySelector('.close-button');
    const editForm = document.getElementById('editForm');
    
    // Función para abrir el modal de edición
    function openEditModal(product) {
        console.log('Abriendo modal para producto:', product);
        
        // Asegurarse de que el producto tenga un ID
        const productId = product.id || product._id;
        if (!productId) {
            console.error('Error: El producto no tiene ID', product);
            return;
        }
        
        // Establecer los valores en el formulario
        document.getElementById('editProductId').value = productId;
        document.getElementById('editTitle').value = product.title || '';
        document.getElementById('editDescription').value = product.description || '';
        document.getElementById('editPrice').value = product.price || 0;
        document.getElementById('editCategory').value = product.category || '';
        document.getElementById('editStock').value = product.stock || 0;
        
        // Mostrar el modal
        modal.style.display = 'block';
    }
    
    // Cerrar el modal al hacer clic en la X
    closeButton.addEventListener('click', () => {
        modal.style.display = 'none';
    });
    
    // Cerrar el modal al hacer clic fuera del contenido
    window.addEventListener('click', (event) => {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
    
    // Manejar el envío del formulario de edición
    editForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        const productId = document.getElementById('editProductId').value;
        const updatedProduct = {
            title: document.getElementById('editTitle').value,
            description: document.getElementById('editDescription').value,
            price: parseFloat(document.getElementById('editPrice').value),
            category: document.getElementById('editCategory').value,
            stock: parseInt(document.getElementById('editStock').value)
        };
        
        // Emitir evento para actualizar producto
        socketRealTime.emit('updateProduct', { id: productId, updates: updatedProduct });
        console.log('Producto actualizado enviado:', productId, updatedProduct);
        
        // Cerrar el modal
        modal.style.display = 'none';
    });
</script>